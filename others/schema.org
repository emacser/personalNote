#+OPTIONS: "\n:t"
ssh复习
* 确定复习的内容纲要及时间分配
** Hibernate学习
*** 基础知识框架
    3.2.chm
**** 遇到问题 关联关系的映射
*** 实际配置与强化
 Hibernate学习笔记.pdf
* struts2
** DONE 基础知识
   CLOSED: [2010-10-26 星期二 17:41]
*** mvc
    优点
    + 视图与模型
	 - 模型与显示逻辑分离
	 - 多个视图对应一个模型
    + 三层架构
	- 降低耦合,提高扩展性
*** strust1
      + API
       	- struts1的api依赖
       	- servlet api的依赖
      + 表现层
*** webwork
       	+ api
       	  - action与 servlet分离
       	+ 表现层
       	  - 更多表现层技术的支持
       	+ ognl
*** model2
	  + 处理流程
	    - filterDispatcher根据请求调用action
	    - 拦截器链对请求应用通用功能
	    - action的execute()的处理信息被输出到浏览器
*** struts1与struts2
	    + action的实现
	    + 线程
	    + servlet api依赖
	    + 可测性
	    + 封装请求参数
	    + 表达式语言
	    + 视图
	    + 类型转换
	    + 数据校检
	    + action执行控制
** DONE 项目搭建
    CLOSED: [2010-10-26 星期二 17:48]
*** web项目的文件结构
** DONE 配置文件
    CLOSED: [2010-10-26 星期二 18:15]
*** web.xml
      + FilterDispatcher 过滤器的添加
      + ActionContextCleanUp 过滤器添加
      + ContextLoaderListener 监听器的添加
*** struts.xml
       	+ include
       	+ package
       	+ action
       	+ result
** DONE action编写
    CLOSED: [2010-10-26 星期二 18:34]
*** 属性及其设置器获取器
*** execute
*** validate()验证方法
*** ActionSupport接口
*** 访问HttpSession
       	 + action中 ActionContext.getContext().getSession().put(键,值)
       	 + jsp中 session.getAttribute(键)
** DONE 表单标签
    CLOSED: [2010-10-26 星期二 18:34]
*** iterator
*** if/else
*** property
** DONE i18n
    CLOSED: [2010-10-26 星期二 19:00]
*** 资源文件
   + 位置
     - classes目录
   + struts.properties 
     - struts.custom.i18n.resources=globalMessages
   + globalMessage_**.properties
     - 名称=要显示的内容
*** 国际化信息输出 
   + <s:text name=""/>
   + <s:propety text="%{getText("")}">
** DONE 数据验证
    CLOSED: [2010-10-26 星期二 19:26]
*** 继承ActionSupport
   + 重写validate()
     addFiledError()
*** 使用Struts2验证框架
   + 校验规则文件
     - validators
     - field
     - filed-validator
   + 位置
     与action同目录
   + 名称
     action名称-validation.xml
** DONE convertor
    CLOSED: [2010-10-27 星期三 16:15]
*** 作用
   + 自动完成字符串类型与其他类型之间的转换
*** 编写
   + 继承ognl.DefaultTypeConvertor
   + 重写convertValue()
     public Object convertValue(Map context,Object value,Class toType)
*** 配置文件
   + src目录下
     - xwork-conversion.xml
       要转换的数据类型=自定义的convertor
*** 批量封装对象
   + 自定义的属性Bean类
   +  配置文件
      - action名称-conversion.property
	action名称_action中的被封装为list的属性名称=自定义的被封装属性Bean类
      - 文件位置
	同转换器类同级目录
** DONE interceptor
   CLOSED: [2010-10-27 星期三 16:57]
*** 作用
    + 方法或字段在访问前加入自定义的各种操作
*** 原理
    + 依次调用根据struts.xml配置文件中的拦截器对象序列
*** 配置
    + struts.xml
      - <interceptor-ref name="拦截器名称">
      - 默认拦截器
	<include file="struts-default.xml"/>
*** 自定义拦截器
    + 方式
      - 实现org.opensymphony.interceptor.Interceptor
      - 继承org.opensymphony.interceptor.AbstractInterceptor
      - 重写 intercept(ActionInvocation ai)方法
	通过 ActionInvocation对象的 getInvocationContext().getSession()获取Map对象
	通过上面获取的Map对象的get()方法获取session中的值
     - 对action的操作
       通过 ActionInvocation对象的 getAction()获取一个Object对象
       判断该对象是否是某个actioin
       如果是,则将该Object对象转换为该action对象
       将session中的值放入action
	调用action
    + 配置
      - struts.xml
	<interceptors>
	<interceptor name="拦截器名称" class="拦截器完整路径名称"/>
	</interceptors> 
** DONE 与spring整合
   CLOSED: [2010-10-27 星期三 17:19]
*** 所需的jar包
*** 配置
    + web.xml
      <listener>
	 <listener-class>org.springframework.web.context.ContextLoaderListener</lisener-class>
      </lisener>
    + struts.properties
      struts.objectFactory=spring
*** 实现
    + 在spring中配置action对象
      <bean id="自定义action" class="该action的实际路径">
	<property name="">
       <ref local="自定义属性"/>
       </property>
      </bean>
    + 在struts的配置文件中直接使用
      <action name="" class="在spring中配置好的action名称">
** DONE upload-down
   CLOSED: [2010-10-28 星期四 11:56]
*** 需要的Jar文件 
*** 上传页面
    + jsp
      -form
      method="POST"
      enctype="mutipart/form-data"
*** 上传action
   + 上传文件所需的属性
      -File名称 myFile--<s:file name="这里自定义的file名称">
      -上传文件的MIME类型 contentType
      -文件名 fileName
      -文件名(不包括完整路径) imageFileName
      -文件标题 caption
    +  需要setter方法的属性
     -上传的文件MIME类型
     -文件名(不包括完整路径)
     -文件名
*** 页面上传内容
    + jsp
      <img src="目录/<s:propety value="action返回的文件名称">">
** DONE crub实现
    CLOSED: [2010-10-29 星期五 10:27]
*** jsp
  + 链接转向action并传递参数
    <a href='<s:url action="action名称"><s:param name="参数名称" value="参数值"/></s:ul>'>链接字段</a>
 + 页面表格范例
   <table>
     <thead>
       <tr>
         <th>表头</th>
       </tr>
   </thead>
   <tbody> 
   <s:iterator value="action传递过来的属性名称">
     <tr>
       <td><s:property value="属性名称"></td>
       </tr>
     </tbody>
   </table>
 + 页面使用struts标签
    <%@ taglib prefix="s" uri="/struts-tags"%>
** DONE ActionContext与ServletActionContext
    CLOSED: [2010-10-28 星期四 11:50]
*** ActionContext
**** 使用情景
     在Action中直接获取请求或会话的一些信息
     直接对JavaServlet Http的请求(HttpServletRequest),响应(HttpServletResponse)操作
**** 使用
     + 获取request中的信息
     Map map = ActionContext.getContext().getParameters();
     String 属性值 = (String)map.get("属性名称")
     + 获取session
	Map session= ActionContext.getContext().getSession();
*** ServletActionContext
**** 特点
     继承了ActionContext
**** 作用
     可以取得的对象有 Http的请求,HttpSession对象,HTTPservlet相应对象,Servlet上下文信息,Http页面上下文,Servlet配置对象
**** 实现
     + 取得HttpServletRequest对象
       HttpServletRequest request = ServletActionContext.getRequest();
     + 取得HttpSession对象
        HttpSession  session = ServletActionContext.getRequest().getSession();
*** ioc方式获取 request response sesson
    + 实现ServletRequestAware ServletResponseAware HttpSessionAware
    + 对应的设置器获取器方法(setter/getter)
** java(web)中的相对路径和绝对路径
** DONE jsp页面
   CLOSED: [2010-10-28 星期四 11:50]
*** 显示错误信息
    + <s:filederror/>
*** Bean批量封装
    + Bean属性 输入 
      <s:iterator value="new int[bean的个数]" status="stat">
	  <tr>
		 <td><s:textarea name="%{'Bean名称['#stat.index'].Bean属性1'}"></td>
		 <td><s:textarea name="%{'Bean名称['#stat.index'].Bean属性2'}"></td>
		 <td><s:textarea name="%{'Bean名称['#stat.index'].Bean属性3'}"></td>
		 ....
	   </tr>
       </s:iterator>
    + Bean属性显示
      <s:iterator name="Bean名称" status="stat">
	  <tr>
	   <td><s:property name="Bean属性名称1"><td>
	   <td><s:property name="Bean属性名称1"><td>
	 </tr>
      </s:iterator> 
** 编程实例
*** 自定义拦截器
*** 自定义转换器
*** 上传下载
*** 与spring整合
*** crub实现
*** 信息国际化的实现
*** 文件的复制 
*** jsp的各种操作
  + Bean的批量封装
  + 属性的显示与输入
* Hibernate
** 项目搭建
** 配置文件
** 体系结构
** 持久化类
** 对象关系映射 
* spring
** DONE 配置文件
   CLOSED: [2010-10-29 星期五 11:35]
*** web.xml
    <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
*** beans.xml
    <bean id="" class="" />
** DONE 项目搭建
   CLOSED: [2010-10-29 星期五 12:02]
*** 所需的jar包
**** spring所需
 + spring.jar
 + common-logging.jar
**** aop所需
 + aspectjrt.jar
 + aspectjweaver.jar
 + cglib-nodep.jar
**** annotation所需
 + common-annotation.jar
*** 配置
** DONE 基本知识
   CLOSED: [2010-10-29 星期五 12:02]
*** 特点
 轻量级 依赖注入 面向切面 容器 框架
*** 模块
  核心容器SessionFactory 上下文context aop springMvc
** DONE 基本bean装配
   CLOSED: [2010-10-29 星期五 18:39]
*** 容纳Bean的容器
**** BeanFactory
***** 作用
 1. 分发一种类型的对象
 2. 创建协作对象之间关联关系
 3. 管理对象的初始化和销毁
***** 实现
 xmlBeanFactory
**** 上下文context
***** 优点
 1. 文本信息解析
 2. 提供了载入资源文件的通用方法
 3. 可以向注册为监听器的Bean发送消息
***** 实现
 1. classPathXmlApplicationContext
 2. FileSystemXmlApplicationContext
 3. XmlWebApplicationContext
**** Bean的生命周期
*** 创建Bean
**** 声明一个Bean
***** Bean的配置
 <bean id="" class=""/>
***** Bean的获取
 ApplicationContext ac = new ClassXmlApplicationContext(new String[] {"/config/beans.xml"});
 ***Bean bean = (自定义Bean)ac.getBean("Bean名称");
**** 构造器注入
***** 默认
 <constructor-arg value=""/>
***** 带参数
      <constructor-arg ref="已定义的Bean"/>
*** 注入Bean
**** 简单数值
***** 装配方法
 1. setter/getter
 2. <property name="" value=""/>
**** 其他Bean
 <property name="" ref=""/>
**** 内部Bean
 <constructor-arg>
   <bean class=""/>
 </constructor-arg>
**** 集合Bean
 List Map Properties Set
**** 空值 
 <null/>
*** Bean的自动装配
**** 装配类型
 name type constructor auto
**** 实现
 <bean id="" class="" autowire=""/>
*** 控制Bean
**** Bean的范围
 <bean id="" class="" scope=""/>
 5种范围
   single prototype session global-session request
**** 工厂方法创建Bean
 单例类静态方法
 <bean id="" class="" factory-method="这里是返回单例的方法"/>
**** 初始化和销毁Bean
***** 实现方法
 <bean id="" class="" init-method=""/>
 <bean id="" class="" destroy-method=""/>
***** 默认的初始化和销毁方法
 <beans
...
 default-init-method=""
 default-destroy-method=""
></bean>  
***** InitializingBean和DisposableBean
 + 优点  实现生命周期接口,容器能自动检测创建他们的Bean
 + 实现 重写afterPropertySet()和destroy()方法
** 高级Bean装配
*** bean的继承
**** 属性配置
 <parent="父bean名称">
 <abstract="true/false">
**** 抽象bean类型
+ 作用是减少xml冗余配置
+ 抽象共同属性
  - 父类 <bean id="" abstract="">属性</bean>
  - 子类 <bean id="" class="" parent="上面父类的id">其他属性</bean>
*** 方法注入
**** 基本方法注入
***** 替换Bean
 + 实现MethodReplacer接口
 + 重写reimplement()
***** bean配置
 + <bean id="被替换bean" class="">
       <replaced-method name="被替换方法" replace="替换方法Bean"/>
   </bean>
**** 获取器注入
***** 方法声明
 在类中声明方法
 public abstract 需要返回的Bean类型 getBean类型();
***** 方法替换 
 <lookup-method name="上面声明的抽象方法名称" bean="需要返回的Bean类型"/>
*** 非springBean的注入
**** 场景
***** 自己实例化的Bean
***** orm中工具实例化的对象或域
***** jsp中自定义标签的对象
**** 应用
***** bean添加abstract修饰
***** 在bean中添加 @Configurable
***** 在spring的配置文件中添加 <aop:spring-configured/>
*** 定义属性编辑器
    DEADLINE: <2010-11-10 星期三>
**** 实现接口
 + PropertieEditorSupport
  - getAsText()
  - setAsText()
**** 注册编辑器 
 + 在org.springframework.beans.factory.config.CustomEditorConfigurer 添加属性
  - <map>
      <entry key="自定义属性编辑器的完整路径名称">
        <bean id="属性编辑器的名称" class="同上面key的值"/>
      </entry>
    </map>
*** 特殊bean
**** 后处理bean
***** 实现BeanPostProcessor接口
 + postProessorBeforeInitialization()
 + postProessorAfterInitialization()
***** 注册Bean
 + 在spring的配置文件中添加bean
 <bean id="" class=""/>
**** 工厂的后处理
***** 实现BeanFactoryPostProcessor接口
 + postProcessorBeanFacory()
***** 注册Bean
 + <bean id="" class=""/>
**** 配置属性的外在化
***** 属性文件
 + PropertiePlaceHolderConfigurer
  - <property name=="location" value="配置文件的位置和名称"/>
  - <property name="locations"> 
     <list>
       <value>配置文件的位置和名称</value>
       <value>.....</value>
     </list>
    </property>
***** 配置文件
 + <property name="属性名称" value="${配置文件中配置的属性对应值}"/>
**** 提取文本信息
***** 原理
 + ApplicationContext 通过 MessageResource 接口把参数化的消息提供给容器
***** ResourceBundleMessageResource 接口
 + 在spring的配置文件中添加引用
  - <bean id="MessageResource" class="org.springframework.context.support.ResourceBundleMessageResource">
      <property name="basename" value="参数化包"/>
    </bean>
***** 获取信息
 + 在spring中获取信息 
   Local local = ...;
   String text = context.getMessage("参数名称",new Object[0],local);
 + 在jsp中获取信息
   <spring:message code="参数名称"/>
*** 程序之间的解耦
**** 发布事件
 + 事件
  实现接口 ApplicationEvent
 + 发布
  ApplicationContext context = ...;
  context.publishEvent(event对象);
**** 监听事件
 + 接口
  org.springframework.context.ApplicationListerner
 + 方法
  onApplicationEvent()
 + 注册
  <bean id="监听器名称" class="监听类完整路径名"/>
*** 脚本化bean
**** xsi添加
 + http://www.springframework.org/schema.lang/spring-lang-2.0.xsd
**** 脚本配置
 + ruby
   <lang:jruby id="bean名称" script-source="脚本文件路径名" script-interface="脚本要实现的接口及路径"/>
 + groovy
   <lang:groovy id="bean名称" script-source="脚本文件路径名" script-interface="脚本要实现的接口及路径"/>
 + bellshell
   <lang:bash id="bean名称" script-source="脚本文件路径名" script-interface="脚本要实现的接口及路径"/>
**** 注入脚本化Bean的属性
 <lang property name="" ref=""/>
**** 刷新脚本化的Bean
 <reflash-check-delay="5000"/>
**** 内嵌脚本
 <lang inline-script>
   <!CDATA[
     内嵌脚本
   ]>
 </lang>
** 通知
** 连接数据库    
** 事务管理
** 其它
 在eclipse中添加spring配置文件提示
   windows-preferences-myeclipse-files and editors-xml-xmlcatalog
点"add",在出现的窗口中的Key Type中选择URL,在location中选"File system",
然后在spring解压目录的dist/resources目录中选择spring-beans-2.5.xsd,回到设置
窗口时,把Key Type改为Schemalocation,Key改为http://www.springframework.org/schema/beans/spring-beans-2.5.xsd

#+OPTIONS: "\n:t"
maven2 笔记
* 基本配置 setting.xml
** 本地仓库目录
 <localRepository>本地仓库目录路径</localRepository>
** 代理
 <proxy>
   <id>optional</id>
   <active>true</active>
   <protoclo>http</protocol>
   <host>ip地址</host>
   <port>端口号</port>
   <noProxyHosts>ip地址</noProxyHosts>
 </proxy>
** 存储库
*** 在应用程序中使用多个repository
<repositories>
  <repositoy>
    <id>仓库1</id>
    <name></name>
    <url></url>
  <repository>
  <repositoy>
    <id>仓库2</id>
    <name></name>
    <url></url>
  <repository>
<repositroies>
* 基本配置 pom.xml
** 继承的写法
<parent>
  <groupId></groupId>
  <aritfactId></artifactId>
  <version></version>
  <relativePath></relativePath>
</arent>
* 常见命令
** 创建java项目
*** mvn archtype:create -DgroupId=包名称即文件的目录结构 -DartifactId=生成的文件名称
** 创建web项目
*** mvn archtype:create -DgroupId=包名称即文件的目录结构 -DartifactId=生成的文件名称 -DarchtypeArtifactId=maven-archetype-webapp
** 编译源码
*** mvn compile
** 编译测试源码
*** mvn test-compile
** 运行测试
*** mvn test
** 产生site
*** mvn site
** 打包
*** mvn package
** 在本地仓库中安装jar
*** mvn install
** 清除产生的项目
*** mvn clean
** 生成eclipse项目
*** mvn eclipse:eclipse
*** 还需在eclipse中建立M2_REPO变量,变量值指向maven2的数据仓库位置
** 生成idea项目
*** mvn idea:idea
** 组合使用goal命令
*** mvn -Dtest package
** 只打包Jar
*** mvn jar:jar
** 只测试不编译和测试编译
*** mvn tes -skipping compile -skipping test-complie
** 清楚eclipse中的一些系统设置
*** mvn eclise:clean
** 将本地jar安装到仓库中
*** mvn install:install -file -Dfile=文件名 -DgroupId=包名 -DartifactId=文件名 -Dversion=版本号 -Dpackage=jar
* 定制一个maven项目
** 创建项目
   mvn archtype:create -DgroupId=包名 -DartifactId=生成的文件名称 -Dversion=版本号
** 定义项目信息
 添加组织法律和开发人员信息
   编辑pom.xml
*** 法律
 <licenses>
  <license>
    <name></name>
    <url></url>
    <distribution></distribution>
    <comments></comments>
  </license>
</licenses>
*** 开发人员
<developers>
  <developer>
    <id></id>
    <name></name>
    <email></email>
    <url></url>
    <organization></organization>
    <organizationUrl></organizationUrl>
    <roles>
      <role></role> 
    <roles>
    <timezone></timezone>
  </developer>
</developers>
*** 组织
    <organization>
      <name></name>
      <url></url>
    </organization>

** 添加依赖
<dependancies>
  <dependancy>
     <groupId></groupId>
     <aritfactId></artifactId>
     <version></version>
  </dependancy>
</dependancies>
** java源码
  将java源码放在对应目录下
** 添加资源
 建立resources目录,并将资源文件放在其中
** 运行程序
 mvn exec:java -Dexec.mainClass=含有main类的完整路径和类名
** 查看项目依赖
 mvn dependency:resolve
** 构建打包的应用程序
*** 在pom.xml中配置assembly插件
<plugin>
  <aritfactId>mavn-assembly-plugin</artifactId>
  <configuration>
    <decriptorRefs>
       <descriptorRef>jar-with-dependencies</descriptorRef>
    </decriptorRefs>
  </configuration>
</plugin>
*** 打包 
 mvn assembly:assembly
*** 执行应用程序 
java -cp target/jar文件名 完整带包名的类名称

* 找依赖包的相关信息
 repo2.maven.org/maven2

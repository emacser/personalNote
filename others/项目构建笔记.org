* 配置文件
** web.xml 配置
*** log4j 日志配置
  #+BEGIN_SRC xml
    <!-- web.xml -->
    <!-- log4j 配置  开始 -->
      <context-param>
          <param-name>log4jConfigLocation</param-name>
          <param-value>/WEB-INF/classes/log4j.properties</param-value>
      </context-param>
      <context-param>
          <param-name>log4jRefreshInterval</param-name>
          <param-value>600000</param-value>
      </context-param>
      <context-param>
          <param-name>webAppRootKey</param-name>
          <param-value>javass.webapp.root</param-value>
      </context-param>
      <listener>
          <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
      </listener>
      <!-- log4j 配置  结束 -->
   #+END_SRC
*** servlet 的编码
  #+BEGIN_SRC xml
     <!-- web.xml -->
      <!-- 设置servlet编码开始 -->
	<filter>
	    <filter-name>Set Character Encoding</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	    </init-param>
	</filter>

	<filter-mapping>
	    <filter-name>Set Character Encoding</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 设置servlet编码结束 -->
      #+END_SRC
***  自定义的拦截器
  #+BEGIN_SRC xml
                <!-- web.xml -->
       	     <!-- 设置BackURL开始 -->    
       	   <filter>
               <filter-name>BackURLFilter</filter-name>
               <filter-class>cn.javass.common.web.filter.BackURLFilter</filter-class>
       	   </filter>

       	   <filter-mapping>
               <filter-name>BackURLFilter</filter-name>
               <url-pattern>/*</url-pattern>
       	   </filter-mapping>
       	   <!-- 设置BackURL结束 --> 
    #+END_SRC
*** spring 的配置文件
  #+BEGIN_SRC xml
      <!-- web.xml -->
       	  <!-- Spring配置文件开始  -->    
       	     <context-param>
               	 <param-name>contextConfigLocation</param-name>
               	 <param-value>
               	     classpath:spring-config.xml
               	 </param-value>
       	     </context-param>
    #+END_SRC
*** sping-mvc的配置
  #+BEGIN_SRC xml
   <!-- web.xml -->
       	      <listener>
               	   <listener-class>
               	       org.springframework.web.context.ContextLoaderListener
               	   </listener-class>
       	       </listener>
       	       <!-- Spring配置文件结束 -->
    #+END_SRC
*** 隐藏http方法的监听器
  #+BEGIN_SRC xml
   <!-- web.xml -->
		  <filter>
		     <filter-name>HiddenHttpMethodFilter</filter-name>
		     <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
		 </filter>
		 <filter-mapping>
		     <filter-name>HiddenHttpMethodFilter</filter-name>
		     <servlet-name>spring</servlet-name>
		 </filter-mapping>
   #+END_SRC
*** spring 的注册
 #+BEGIN_SRC xml
  <!-- web.xml -->
 <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
 #+END_SRC

** 数据库的配置
*** 用 properties 文件来配置数据库相关信息
*** hibernate配置相关
 #+BEGIN_SRC proerties
 # resources.properties
 hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
hibernate.hbm2ddl.auto=none
hibernate.show_sql=false
hibernate.query.substitutions=true 1, false 0
hibernate.default_batch_fetch_size=16
hibernate.max_fetch_depth=2
hibernate.bytecode.use_reflection_optimizer=true
hibernate.cache.use_second_level_cache=true
hibernate.cache.use_query_cache=true
hibernate.cache.region.factory_class=org.hibernate.cache.EhCacheRegionFactory
net.sf.ehcache.configurationResourceName=/ehcache_hibernate.xml
hibernate.cache.use_structured_entries=true
hibernate.generate_statistics=true
 #+END_SRC
*** 数据库连接配置
 #+BEGIN_SRC proerties
 # resources.properties
 connection.driver_class=com.mysql.jdbc.Driver
connection.url=jdbc:mysql://localhost:3306/javassdb?useUnicode=true&amp;characterEncoding=UTF-8
connection.username=DECG
connection.password=DECG
 #+END_SRC
*** 连接池配置
 #+BEGIN_SRC proerties
 # resources.properties
 proxool.maximum.connection.count=40
proxool.minimum.connection.count=5
proxool.statistics=1m,15m,1h,1d
proxool.simultaneous.build.throttle=30
 #+END_SRC
** 日志配置
*** 命令行中的日志配置
 #+BEGIN_SRC proerties
  # log4j.properties
 #console log
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
 # 输出的时间格式
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c - %m%n
 #+END_SRC    
*** 将日志输出到文件中
 #+BEGIN_SRC proerties
  # log4j.properties
 #all log
log4j.appender.DAILY_ALL=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DAILY_ALL.layout=org.apache.log4j.PatternLayout
log4j.appender.DAILY_ALL.layout.ConversionPattern="%p %d{yyyy-MM-dd HH:mm:ss} %-50.50c(%L) - %m%n
log4j.appender.DAILY_ALL.File=D:/Backup/javass-all.log
 #+END_SRC
*** 日志输出的级别
 #+BEGIN_SRC proerties
  # log4j.properties
 log4j.rootLogger=INFO,CONSOLE
 #+END_SRC
** spring的基本配置
*** 注解扫描包
 #+BEGIN_SRC xml
    <!-- spring-config.xml -->
     <!-- 扫描注解Bean -->
    <context:component-scan base-package="cn.javass">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
 #+END_SRC
*** 资源文件
   #+BEGIN_SRC xml
 <!-- spring-config.xml -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- 配置文件为上面数据库配置的 properties 文件 -->
                <value>classpath:resources.properties</value>
            </list>
        </property>
    </bean>
   #+END_SRC
*** 国际化的消息资源文件
  #+BEGIN_SRC xml
  <!-- 国际化的消息资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:messages</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
 #+END_SRC
*** spring中数据源的配置
  #+BEGIN_SRC xml
 <bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="alias" value="proxoolDataSource"/>
		<property name="driver" value="${connection.driver_class}" />
		<property name="driverUrl" value="${connection.url}" />
		<property name="user" value="${connection.username}" />
		<property name="password" value="${connection.password}" />
		<property name="maximumConnectionCount" value="${proxool.maximum.connection.count}"/>
		<property name="minimumConnectionCount" value="${proxool.minimum.connection.count}" />
		<property name="statistics" value="${proxool.statistics}" />
		<property name="simultaneousBuildThrottle" value="${proxool.simultaneous.build.throttle}"/>
	</bean>
  #+END_SRC
*** spring中session工厂的配置
  #+BEGIN_SRC xml
  <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
    	<property name="dataSource" ref="dataSource"/>
    	<property name="packagesToScan">
			<list>
				<value>cn.javass</value>
			</list>
		</property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>

                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
            </props>
        </property>
  	</bean>
  #+END_SRC
*** 开启aop的监听
  #+BEGIN_SRC xml
  <!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
  #+END_SRC
*** 开启aop的注解事务
 #+BEGIN_SRC xml
  <!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="txManager"/>

    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* cn.javass..service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
 #+END_SRC
** spring-mvc配置
*** 自定义类型绑定接口
 #+BEGIN_SRC xml
  <!-- 会自动注册了validator  ConversionService  -->
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service"/>
 <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
     <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"  /> 
 #+END_SRC

*** 开启springmvn的注解
 #+BEGIN_SRC xml
  <!-- 开启controller注解支持 -->
    <!-- 注：如果base-package=cn.javass 则注解事务不起作用 TODO 读源码 -->
    <context:component-scan base-package="cn.javass.demo.web.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
 #+END_SRC

*** 视图配置
 #+BEGIN_SRC xml
  <!-- ========================= VIEW定义 ========================= -->
    <!-- bean name view resolver-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>  
    
    <!-- 根据客户端的不同的请求决定不同的 view进行响应, 如 /blog/1.json /blog/1.xml -->  
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1">  
        <!-- 设置为true以忽略对Accept Header的支持-->  
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->  
        <property name="favorPathExtension" value="false"/>  
        
         <!-- 用于开启 /userinfo/123?format=json 的支持 -->  
         <property name="favorParameter" value="false"/>  
         
        <property name="mediaTypes">  <!--favorPathExtension, favorParameter是true时才起作用  -->
            <map>  
<!--                <entry key="wml" value="text/vnd.wap.wml"/>-->
<!--                <entry key="vnd" value="application/vnd.wap.xhtml+xml"/>-->
<!--                <entry key="xhtml" value="application/xhtml+xml"/>-->
                <entry key="html" value="*"/>
            </map>  
         </property>  
         <property name="viewResolvers">  
             <list>  
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="contentType" value="text/html"/>
                    <property name="prefix" value="/WEB-INF/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>  
        </property>  
        <!-- 可配置Not Found url
        <property name="defaultViews">
            <list>  
                 <bean class="org.springframework.web.servlet.view.JstlView" p:url="/notfound"/>  
            </list>  
        </property>  --> 
    </bean>  
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="3">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html"/>        
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
 #+END_SRC


*** json视图
 #+BEGIN_SRC xml
   <!-- json view -->
    <bean id="defaultJsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
 #+END_SRC
*** 上传配置
 #+BEGIN_SRC xml
   <!-- 文件上传相关 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--one of the properties available;the maximum file size in bytes-->
        <property name="maxUploadSize" value="100000"/>
    </bean>
 #+END_SRC

*** 异常控制
 #+BEGIN_SRC xml
   <!-- 控制器异常处理 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
              <props>
                  <prop key="java.lang.Exception">
                        error_all
                </prop>
            </props>
        </property>
    </bean>
 #+END_SRC

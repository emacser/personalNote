* jpa是什么
** 定义
*** sun提出的java的持久化规范
** 作用
*** 为开发者提供一种对象/关系映射工具来管理Java应用中的关系数据
*** 简化当前的持久化工作和整合orm技术
** 优点
*** 吸收了当前各种orm框架的优点
** 技术点
*** orm元数据
*** java持久化API
*** 查询语言
* jpa注解
** 添加注解的位置
*** 实体
*** 表名
*** 主键
*** 其他属性
** 注解的添加
*** 实体的标识
 - @Entity
*** 表名
 - @Table(name="")
*** 常用字段类型
  - @Column(name="")
   + unique 是否唯一
   + nullable 是否可以为空
   + insertable 是否可以插入
   + columnDefinition 定义建表时创建此列的DDL
   + secondaryTable 从表名称
*** 设置时间类型
 - @Temporal(TemproalType.DATE)
*** 排序
 - OrderBy(name="")
*** 主键Id
  - @Id
  - @GeneratedValue(stratety=GenerationType.SEQUENCE)
   + 使用Sequence来实现表主键自增
  - @GeneratedValue(stratety=GenerationType.IDENTITY)
   + 主键自增
  - @GeneratedValue(stratety=GenerationType.TABLE)
   + 通过一个表来实现自增
** 复杂映射注解
*** 一对多关联
 - 主POJO
  - 子POJO类
*** 多对多关联
* jpa所依赖的包(hibernate)
** hibernate核心包
 - hibernate3.jar
 - cglib.jar
 - requried目录下所有的包
** 注解
 - hibernate-annotations.jar
 - ejb3-persistence.jar
 - hibernate-commons-annoatations.jar
** 针对jpa的实现包 
 - hibernate-entitymanage.jar
 - log4j.jar
 - slf4j-log4j.jar
* jpa配置文件
 - 放在META-INF目录下persistence.xml
#+BEGIN_SRC xml 
<?xml version="1.0"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
	version="1.0">
	<persistence-unit name="DECG" transaction-type="RESOURCE_LOCAL">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<properties>
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect" />
			<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver" />
			<property name="hibernate.connection.username" value="root" />
			<property name="hibernate.connection.password" value="root" />
			<property name="hibernate.connection.url"
				value="jdbc:mysql://localhost:3306/DECG_NEW?useUnicode=true&amp;characterEncoding=UTF-8" />
			<property name="hibernate.max_fetch_depth" value="3" />
			<property name="hibernate.hbm2ddl.auto" value="update" />
			<property name="hibernate.jdbc.fetch_size" value="18" />
			<property name="hibernate.jdbc.batch_size" value="10" />
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="false" />
		</properties>
	</persistence-unit>
 </persistence>
#+END_SRC 
** 配置解析
*** <jpa-data-source>
 - 配置全局事务
*** <persistence-unit name="" transaction-type="RESOURCE_LOCAL"> 
 - 本地事务
*** <persistence-unit name="" transaction-type="JTA"> 
 - 全局事务，一般在应用服务器中
* tips
** 流程策略 
 - 先配置文件和实体Bean,再生成表
** 主键 
 - jpa不支持UUID这种主键生成方式
 - 只能为Integer类型的主键提供自增长
 - String类型的主键配置为 @Id
 - 自增长的配置
  + @GeneratedValue
** 级联
*** REFRESH
 - 保证该当前数据是最新的数据
 - refresh()方法重新获取数据
*** MERGE
 - 如果有该记录,则更新,没有则新增
 - merge()来执行更新/保存操作
*** PERSIST
 - 保存数据
 - persist()方法保存数据
*** REMOVE
 - 删除记录
 - remove()执行删除操作
** 延迟加载
*** fetch
 - EAGER
  + 立即加载
 - LAZY
  + 延迟加载
 - class
 - 如果是多的一方,将默认为延迟加载
** 维护/被维护端配置
 - mappedBy
  + 定义在多的一方实体类中来维护一的一方的属性
 - jpa中没有明确定义维护与被维护端
 - @JoinColumn
  + 一般在关系维护端建立外键
  + 在关系被维护端使用mappedBy
** 可选项
 - optional
  + true 该属性可为空
  + false 该属性必须存在
** 表的名称
 - @Table(name="表名称")
** 手动生成UUID的方法
 -  String id = UUID.randromUUID().toString();
** equals/hashcode方法
*** 如果方法中有比较2个对象的,需要重写这2个方法
*** 比如:
 - 包含的检验
* jpa开发环境的配置
** jpa项目创建
 - 导入Jar包(数据库连接jar包)
 - 导入persistence.xml模板
** jpa的使用
 - 例子
** 说明
*** 默认是根据实体类的属性名称来命名数据库中列名的
*** 一端定义级联
 - CascadeType.PERSIST/MERGE/REFRESH/DELETE等等
* 一对多和多对一配置
** 一对多关联
*** 使用集合类存放多的一方
*** 注解的添加
 - @OneToMany(Cascade="CascadeType....")
 - fetch=fetchType....
 - mappedBy="order"
 - 需要配置的项目
  + OneToMany注解
  + 级联 Cascade
  + 延迟加载配置
  + 维护/被维护端配置,由多的一方来维护关联关系
** 多对一关联
*** 直接使用一的一方类型作为多方的属性
*** 注解的添加
 - @ManyToOne(Cascade="CascadeType...")
 - optional=true
 - JoinColumn(name="")
 - 要配置的项目
 + 可选级联
   + 级联更新 CascadeType.MERGE
   + 级联刷新 CascadeType.REFRESH
 + optional
  + 表示该属性可以为空
 + 外键关联配置,name为外键的名称
* 一对一双向关联配置
** 属性设置
 - 各自在实体类中添加关联的外键(实体类互相作为对方的属性)
 - 映射中关联的外键对应属性只需要在其中一方配置一个optional(optional=false)
  + 不要在2个中都配置,否则会报错
 - 维护端配置外键(JoinColumn)
 - 被维护端配置mappedBy
** 注解添加
*** 维护端
 - ManyToOne(cascade = CascadeType.ALL)
 - JoinColumn("外键的名称")
*** 被维护端
   - OneToOne(cascade=CascadeType.ALL,mappedBy="主键名称",optional=false)
* 要点
 - 
* 多对多双向关联
** 要点
 - 2方都必须添加ManyToMany注解
 - 在维护端添加 JoinTable注解
 - 在被维护端添加mappedBy注释
 - 使用
  + 各自保存实体类
  + 从数据库中拿出对象,保存关系
  + flush刷新数据到数据库中
** 属性设置
 - 互相在对方的实体中添加Set<Object>类型属性
** 注解添加
 - 维护端
   - @ManyToMany(Cascade="CascadeType....")
   - @JoinTable(name="中间表的名称") 
 - 被维护端
   - @ManyToMany(Cascade="CascadeType....") 
   - mappedBy="维护端中的外键对象属性的名称"
 -  默认为延迟加载(Many)
** 关系的添加
 - 在被维护端添加关系方法
  + add***()
** 关系的删除
 - 先解除关系
  + 从集合类中删掉包含的对象
 - 删除记录
** 关联关系的建立
 - 将2个实体类分别保存进数据库 em.persist(object)
 - 查询到该实体,设置关联关系 em.find(Class,id) // em.getReference(class,id)
* 联合主键
** 方法添加
*** hashcode()
*** equals()
** 类的建立
*** 联合主键类添加注释
 - @Embeddable
*** 将联合主键类作为实体类的属性
 - @EmbeddedId

* Annotation
** 定义
 - 注释添加的位置
  + @Target(elementType.METHOD)
  + 默认为任意位置
 - 运行时间
  + @Retention(RetentionPolicy.RUNTIME)
 - 属性
  + 只能是基本属性或Class或另一个注解
 - 使用
  + 如果属性是value,则可以略去"value="
  + @自定义注释(属性名称="属性值")
** 使用
*** 反射相关
 - 获取对象的所有声明方法
  + Method[]  methods = obj.getClass().getMethods();
 - 放射方式执行某方法
  + m.invoke(对象,参数);
*** 判断是否有指定注释
 + Boolean flag =  方法对象.isAnnoationPersent(注释类.class);
*** 获取方法上的注释
 + 注释类对象 = 方法对象.getAnnotation(注释类.class);
* Jpa的生命周期
** 说明
*** NEW
 - 瞬时
*** Managed
 - 持久化受管
*** Datached
 - 游离
*** Removed
 - 删除
** 图示
 [[jpa01.jpg
    
    
    
* 一对一映射

* UMLINACTION
** 为什么需要UML
*** 面向过程还是面向对象
**** 面向过程方法
**** 面向过程的困难
**** 面向对象方法
**** 面向对象的困难
*** UML带来了什么
**** 什么是UML
**** 统一语言
**** 可视化
**** 从现实世界到业务模型
**** 从业务模型到概念模型
**** 从概念模型到设计模型
**** 面向对象的困难解决了吗
*** 统一过程简介
**** RUP是什么
**** RUP与UML
**** RUP与软件工程
**** RUP与最佳实践
**** RUP与本书
** 建模基础
*** 建模
*** 用例驱动
*** 抽象层次
*** 视图
*** 对象分析方法
** UML核心元素
*** 版型
*** 参与者
**** 基本概念
**** 发现参与者
**** 业务主角
**** 业务工人
**** 参与者与涉众的关系
**** 参与者与用户的关系
**** 参与者与角色的关系
**** 参与者的核心地位
**** 检查点
*** 用例
**** 基本概念
**** 用例的特征
**** 用例的粒度
**** 用例的获得
**** 用例和功能的误区
**** 目标和步骤的误区
**** 用例粒度的误区
**** 业务用例
**** 业务用例实现
**** 概念用例
**** 系统用例
**** 用例实现
*** 边界
**** 边界决定视界
**** 边界决定抽象层次
**** 灵活使用边界
*** 业务实体
**** 业务实体的属性
**** 业务实体的方法
**** 获取业务实体
*** 包
*** 分析类
**** 边界类
**** 控制类
**** 实体类
**** 分析类的三高
*** 设计类
**** 类
**** 属性
**** 方法
**** 可见性
*** 关系
**** 关联关系（association）
**** 依赖关系（dependency）
**** 扩展关系（extends）
**** 包含关系（include）
**** 实现关系（realize）
**** 精化关系（refine）
**** 泛化关系（generalization）
**** 聚合关系（aggregation）
**** 组合关系（composition）
*** 组件
**** 完备性
**** 独立性
**** 逻辑性
**** 透明性
**** 使用组件
*** 节点
**** 分布式应用环境
**** 多设备应用环境
** UML核心视图
*** 静态视图
**** 用例图
**** 类图
**** 包图
*** 动态视图
**** 活动图
**** 状态图
**** 时序图
**** 协作图
** UML核心模型
*** 用例模型概述
*** 业务用例模型
**** 业务用例模型主要内容
**** 业务用例模型工件的取舍
**** 何时使用业务用例模型
*** 概念用例模型
**** 概念用例模型的主要内容
**** 获得概念用例
**** 何时使用概念用例模型
*** 系统用例模型
**** 系统用例模型的主要内容
**** 获得系统用例
*** 领域模型
**** 读者须知
**** 基本概念
**** 领域模型的主要内容
*** 分析模型
**** 如何使用分析模型
**** 分析模型的主要内容
**** 分析模型的意义
*** 软件架构和框架
**** 软件架构
**** 软件框架
**** 何时使用架构和框架
*** 设计模型
**** 设计模型的应用场合
**** 设计模型的主要内容
**** 从分析模型映射到设计模型
*** 组件模型
**** 何时使用组件模型
**** 广义组件的用法
*** 实施模型 何时使用实施模型
** 统一过程核心工作流简介
*** 业务建模工作流程
**** 工作流程
**** 活动集和工件集
**** 业务建模的目标和场景
*** 系统建模工作流程
**** 工作流程
**** 活动集和工件集
**** 系统建模的目标
*** 分析设计建模工作流程
**** 工作流程
**** 活动集和工件集
**** 分析设计的目标
**** 推荐的分析设计工作流程简介
*** 实施建模工作流程
**** 工作流程
**** 活动集和工件集
**** 推荐的实施建模工作流程
** 迭代式软件生命周期

** 准备工作
*** 案例说明
*** 了解问题领域
**** 了解业务概况
**** 整理业务目标
*** 做好涉众分析
**** 什么是涉众
**** 发现和定义涉众
**** 涉众分析报告
*** 规划业务范围
**** 规划业务目标
**** 规划涉众期望
*** 整理好你的思路
**** 划分优先级
**** 规划需求层次
**** 需求调研计划
*** 客户访谈技巧
**** 沟通的困难
**** 沟通技巧
*** 提给读者的问题
** 获取需求
*** 定义边界
**** 盘古开天――从混沌走向清晰
**** 现在行动：定义边界
**** 进一步讨论
**** 提给读者的问题
*** 发现主角
**** 女娲造人――谁来掌管这个世界
**** 现在行动：发现主角
**** 进一步讨论
**** 提给读者的问题
*** 获取业务用例
**** 炎黄之治――从愚昧走向文明
**** 现在行动：获取业务用例
**** 进一步讨论
**** 提给读者的问题
*** 业务建模
**** 商鞅变法――强盛的必由之路
**** 现在行动：建立业务模型
**** 进一步讨论
**** 提给读者的问题
*** 领域建模
**** 风火水土――寻找构成世界的基本元素
**** 现在行动：建立领域模型
**** 进一步讨论
**** 提给读者的问题
*** 提炼业务规则
**** 牛顿的思考――揭穿苹果的秘密
**** 现在行动：提炼业务规则
**** 进一步讨论
**** 提给读者的问题
*** 获取非功能性需求
**** 非物质需求――精神文明是不可缺少的
**** 现在行动：获取非功能性需求
**** 进一步讨论
**** 提给读者的问题
*** 主要成果物
** 需求分析
*** 关键概念分析
**** 阿基米德杠杆――找到撬动地球的支点
**** 现在行动：建立概念模型
**** 进一步讨论
**** 提给读者的问题
*** 业务架构
**** 拼图游戏――我们也想造个世界
**** 现在行动：建立业务架构
**** 进一步讨论
**** 提给读者的问题
*** 系统原型
** 系统分析
*** 确定系统用例
**** 开始规划――确定新世界的万物
**** 现在行动：确定系统用例
**** 现在行动：描述系统用例
**** 进一步讨论
**** 提给读者的问题
*** 分析业务规则
**** 设定规则――没有规矩不成方圆
**** 现在行动：分析业务规则
**** 提给读者的问题
*** 用例实现
**** 绘制蓝图――世界将这样运行
**** 现在行动：实现用例
**** 进一步讨论
**** 提给读者的问题
*** 软件架构和框架
**** 设计架构――新世界的骨架
**** 什么是软件架构
**** 什么是软件框架
**** 软件架构的基本构成
**** 应用软件架构
**** 提给读者的问题
*** 分析模型
**** 设计功能零件――让世界初步运转起来
**** 现在行动：建立分析模型
**** 进一步讨论
**** 提给读者的问题
*** 组件模型
**** 设计功能部件――构建世界的基础设施
**** 现在行动：建立组件模型
**** 进一步讨论
**** 提给读者的问题
*** 部署模型
**** 安装零部件――组装一个新世界
**** 现在行动：建立部署模型
**** 提给读者的问题
** 系统设计
*** 系统分析与系统设计的差别
*** 设计模型
**** 按图索骥――为新世界添砖加瓦
**** 现在行动：将分析模型映射到设计模型
**** 进一步讨论
**** 提给读者的问题
*** 接口设计
**** 畅通无阻――构建四通八达的神经网络
**** 现在行动：设计接口
**** 进一步讨论
**** 提给读者的问题
*** 包设计
**** 分工合作――组织有序世界才能更好
**** 现在行动：设计包
**** 进一步讨论
*** 提给读者的问题
** 数据库设计
*** 关公战秦琼――面向对象与关系模型之争
*** 相辅相成――面向对象的数据库设计
*** 平衡的艺术――数据库设计的方法和策略
**** OR-Mapping策略
**** 对象―关系平衡策略
*** 进一步讨论――数据库设计到底有多重要
** 开发
*** 生成代码
**** 现在行动：生成代码
**** 进一步讨论
*** 分工策略
**** 纵向分工策略
**** 横向分工策略
**** 选择适合你的开发分工策略
** 测试
*** 质量保证――新世界需要稳健运行
*** 设计和开发测试例
*** 提给读者的问题
** 理解用例的本质
*** 用例是系统思维
*** 用例是面向服务的
*** 善用用例方法
** 理解用例驱动
*** 用例与项目管理
*** 用例与可扩展架构
** 用例驱动与领域驱动
*** 用例驱动与领域驱动的差异
*** 领域驱动的理想与现实
*** 如何决定是甭采用领域驱动方法
** 理解建模的抽象层次
*** 再讨论抽象层次
**** 层次高低问题
**** 层次不交叉问题
*** 如何决定抽象层次
*** 抽象层次与UML建模的关系
** 划分子系统的问题
*** 面向对象的子系统问题
*** UC矩阵还适用吗
*** 如何划分子系统
** 学会使用系统边界
*** 边界是面向对象的保障
*** 利用边界来分析需求
**** 边界分析示例一
**** 边界分析示例二
*** 边界意识决定设计好坏
** 学会从接口认知事物
*** 怎样描述一件事物
*** 接口是系统的灵魂
** 学会正确选择
*** 屁股决定脑袋――学会综合权衡
*** 理辩则明――学会改变视角
** 学会使用设计模式
*** 如何学习设计模式
*** 如何使用设计模式

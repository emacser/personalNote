* 继承机制的实现
 - 所有开发者定义的类都可以作为基类
 - 本地类和宿主类不能作为基类
 - 可以创建只提供通用方法的抽象类
 - 子类将继承超类的所有属性和方法
* 继承的方式
** 对象冒充
 - 例子
#+BEGIN_SRC javascript
 function  Car(color,size){
	this.color = color;
	this.size = size;
	this.driver = new Array("scott","john","jobs");
	
	this.run = function(){
		alert(this.color);
		};
}

function Autobike(color,name){
		this.newMethod = Car;
		this.newMethod(color);
		delete this.newMethod;
	
		this.name = name;
		this.say = function(){
				alert(this.name);
			}
	}
	
	var a = new Car("red","21");
	var b = new Autobike("green","lord");
	
	a.run();
	b.run();
	b.say();
#+END_SRC
** call方法
*** call的使用
 - 例子
#+BEGIN_SRC javascript
 function sayColor(sPrefix,sSuffix){
		alert(sPrefix+this.color+sSuffix);
	};
	var obj = new Object();
	obj.color = "red";
	sayColor.call(obj,"the color is ",",haha!");
#+END_SRC
*** call实现的继承
 - 例子
#+BEGIN_SRC javascript

  function  Car(color,size){
	this.color = color;
	this.size = size;
	this.driver = new Array("scott","john","jobs");
	
	this.run = function(){
		alert(this.color);
		};
}

function Autobike(color,name){
		Car.call(this,color);
	
		this.name = name;
		this.say = function(){
				alert(this.name);
			}
	}
	
	var a = new Car("red","21");
	var b = new Autobike("green","lord");
	
	a.run();
	b.run();
	b.say();
#+END_SRC
** apply方法
 - 例子
#+BEGIN_SRC javascript
  function  Car(color,size){
	this.color = color;
	this.size = size;
	this.driver = new Array("scott","john","jobs");
	
	this.run = function(){
		alert(this.color);
		};
}

function Autobike(color,name){
		Car.apply(this,arguments);
	
		this.name = name;
		this.say = function(){
				alert(this.name);
			}
	}
	
	var a = new Car("red","21");
	var b = new Autobike("green","lord");
	
	a.run();
	b.run();
	b.say();
#+END_SRC

** 原型法
 - 例子
#+BEGIN_SRC javascript
 function ClassA(){}
ClassA.prototype.color = "red";
ClassA.prototype.sayColor = function(){
	alert(this.color);
};

function ClassB(){
}
ClassB.prototype.name = "";
ClassB.prototype.sayName = function(){
	alert(this.name);
};
ClassB.prototype = new ClassA();

var a = new ClassA();
var b = new ClassB();
a.sayColor();
b.sayColor();
b.name = "lord";
b.sayName();
#+END_SRC

** 混合方式
 - 例子1
#+BEGIN_SRC javascript
 function ClassA(sColor){
		this.color = sColor;
	}
ClassA.prototype.sayColor = function(){
		alert(this.color);
	}
function ClassB(sColor,sName){
		ClassA.call(this,sColor);
		this.name = sName;
	}
ClassB.prototype = new ClassA();
ClassB.prototype.sayName = function(){
	alert(this.name);
}
var a = new ClassA("green");
var b = new ClassB("blue","lord");

a.sayColor();
b.sayColor();
b.sayName();
#+END_SRC
 - 例子2
#+BEGIN_SRC javascript
 //父类 多边形类
function Polygon(iSide){
	this.side = iSide;
}

Polygon.prototype.getArea = function(){
	return 0;
}

//三角形
function Triangle(iBase,iHeight){
	Polygon.call(this,3);
	this.base = iBase;
	this.height = iHeight;
}

Triangle.prototype = new Polygon();
//覆盖getArea方法
Triangle.prototype.getArea = function(){
	return 0.5*this.base*this.height;
};

// 四边形
function Rectangle(iHeight,iWidth){
	Polygon.call(this,4);
	this.height = iHeight;
	this.width = iWidth;
}

Rectangle.prototype.getArea = function(){
	return this.height*this.width;
}
//测试
var t = new Triangle(3,4);
var r = new Rectangle(4,5);
alert(t.getArea());
alert(r.getArea());
#+END_SRC

** 动态原型
 - 例子
#+BEGIN_SRC javascript
 //父类 多边形类
function Polygon(iSide){
	this.side = iSide;
	
	if(typeof Polygon._initialized == "undefined"){
		Polygon.prototype.getArea = function(){
			return 0;
		};
	}
	Polygon._initialized=true;
}

//三角形
function Triangle(iBase,iHeight){
	Polygon.call(this,3);
	this.base = iBase;
	this.height = iHeight;
	
	if(typeof Triangle._initialized == "undefined"){
		Triangle.prototype.getArea = function(){
			return 0.5*this.base*this.height;
		};
		Triangle._initialized=true;
	}
}
		Triangle.prototype = new Polygon();
// 四边形
function Rectangle(iHeight,iWidth){
	Polygon.call(this,4);
	this.height = iHeight;
	this.width = iWidth;
	
	if(typeof Rectangle._initialized == "undefined"){
		Rectangle.prototype.getArea = function(){
			return this.height*this.width;
		};
	Rectangle._initialized=true;
	}
}
		Rectangle.prototype = new Polygon();
//测试
var t = new Triangle(3,4);
var r = new Rectangle(4,5);
alert(t.getArea());
alert(r.getArea());
#+END_SRC

* dom简介
** xml介绍
*** 基于SGML语言发展而来
*** 针对xml的API
**** sax
*****  优点
 - 按文本方式解析,更清凉,快速
***** 缺点
 - 解析中无法停止,无法直接访问结构中特定部分
**** dom
 - 基于树实现
**** 节点的层次
 - 节点
  + 定义了Node接口及节点类型来表示xml节点
***** Document
 - 最顶层的节点,所有节点的根节点
***** DocumentType
 - DTD引用
***** DocumentFragment
 - 可以和Document一样来保存其他节点
***** Elemtn
 - 标签之间的内容
***** Attr
 - 包含特性名和特性值的节点
***** Text
 - 标签之间的文本内容
***** CDataSection
 - cdata对象表现
***** Entity
 - DTD中的一个实体定义
***** EntityReference
 - 实体引用
***** ProcessingInstruction
 - 代表一个pi
***** Comment
 - xml注释
***** Notation
 - DTD定义的记号
**** dom接口
***** nodeName
***** nodeValue
***** NodeType
***** ownerDocument
 - 节点所属的文档
***** firstChild
***** lastChild
***** previousSibling
 - 指向前一个兄弟节点 
***** nextSibling
 - 后一个兄弟节点
***** hasChildNodes()
***** attribute
 - 代表一个元素特性的对象
***** appendChild(node)
 - 末位添加node
***** removeChild(node)
***** replaceChild(newnode,oldnode)
***** insertBefore(newnode,refnode)
***** NodeList
 - 节点数组
***** NamedNodeMap
 - 数值和名字进行索引的节点表
*** 特定语言的DOM
* 对DOM的支持
* 使用dom
** 节点的访问
*** 常用属性
 - firstChild
 - lastChild
 - childNodes[i]
 - item[i]
 1. 例子
#+BEGIN_SRC javaScript
 var oHtml = document.documentElement;
 var oHead = oHtml.firstChild;
 var oBody = oHtml.lastChild;
 // 或者
 var oHead = oHtml.childNodes[0];
 var oBody = oHtml.childNodes[1];
//或者
 var oHead = oHtml.childNodes.item(0);
 var oBody = oHtml.childNodes.item(1);
#+END_SRC
** 检测节点类型
 1. Document.nodeType
 2. ie不支持节点类型常量,但可自定义
** 处理特性
 1.  Elemtnt节点的attributes属性就是NamedNodeMap
 2.  常用方法
   - getNamedItem(name)
    + 返回nodeName属性值等于name的节点
   - removeNamedItem(name)
    + 删除nodeName属性值等于name的节点
   - setNamedItem(node)
    + 将节点node添加到列表中
   - item(pos)
     + 返回pos位置的节点
   - 例子
 #+BEGIN_SRC javaScript
  op = Document.getElementById("idName");
 op.attrubutes.getNamedItem("name").nodeValue= "要设置的属性值";
#+END_SRC
3. 属性操作的常用方法
 - getAttrubite(name);
 - setAttribute(name,value);
 - removeAttribute(name);
** 访问指定节点
*** getElementByTagName()
 - 查询所有元素时,将参数设置为*
*** getElementById() 
*** getElementByName()
** 创建和操作节点
*** 创建节点
 - 不同浏览器支持不同
 - 常用方法
  1. createDocumentFragMent()
    + 创建一个文档碎片,封装多个节点一起提交
  2. createElement()
  3. createTextNode()
*** createElement/createTextNode/appendChild
 - 例子
 #+BEGIN_SRC javaScript
 var oP = document.createElement("p");
 var oText = document.createTextNode("hellow world!");
zoP.appendChild(oText);
document.body.appendChild(oP);
var oQ = document.doby.getElementByTagName("p")[0];
document.body.removeChild(oQ);
#+END_SRC
*** removeChild()/eaplaceChild()/insertBefore()
 #+BEGIN_SRC javaScript
 var oQ = document.doby.getElementByTagName("p")[0];
document.body.removeChild(oQ);
#+END_SRC
*** createDocumentFragMent()
 - 创建一个文档碎片,一次性添加多个节点到document
 - 例子
 #+BEGIN_SRC javaScript
 var arrText = ["first","second","third"];
 var oFragment = document.createDocumentFragMent();
 for(var i=0;i<arrText.length;i++){
  var oP = document.createElement("p");
  var oText = document.createText(arrText[i]);
  oP.appendChild(oText);
  oFragment.appendChild(oP);
 }
  document.body.appendChild(oFragment);
#+END_SRC
* dom特征功能
** 特性与属性
  - dom元素中包含的特性可作为属性
  - 例子
 #+BEGIN_SRC javaScript
  <image src="test.jpg" border="0">
  oImage.setAttribute("border","2");

   oImage.src="test2.jpg";
   oImage.border= "2";
#+END_SRC
  - 注意
    + 如果属性是class,则对应的属性名称是className
    + 尽可能第使用属性(ie兼容性差)
** table方法
*** table元素
   - 常用的特性
     1. caption - <caption>
     2. tBodies - <tbody>
     3. tFoot - <tfoot>
     4. tHead - <thead>
     5. rows - 所有行集合
   - 常见方法
     1. createTHead() - 创建<thead>
     2. createTFoot() - 创建<tfoot>
     3. createCaption() - 创建<caption>
     4. deleteTHead()
     5. deleteTFoot()
     6. deleteCaption()
     7. deleteRow(position) - 删除指定行
     8. insertRow(postion) - 指定位置添加行
*** tbody元素
 - 常用特性
  1. rows
 - 常用方法
  1. deleteRow(position)
  2. insertRow(position)
***  tr元素
  1. cells - 所有单元格的集合
  2. deleteCell(position) - 删除指定单元格
  3. insertCell(position) - 插入单元格
- 例子
#+BEGIN_SRC java javaScript
 window.onload = function (){
	var oTable = document.createElement("table");
	oTable.setAttribute("border","1");
	oTable.setAttribute("width","95%");
	
	var oTbody = document.createElement("tbody");
	oTable.appendChild(oTbody);
	
	oTbody.insertRow(0);
	oTbody.rows[0].insertCell(0);
	oTbody.rows[0].insertCell(1);
	oTbody.rows[0].cells[0].appendChild(document.createTextNode("cell 1,1"));
	oTbody.rows[0].cells[1].appendChild(document.createTextNode("cell 2,1"));
	document.body.appendChild(oTable);
}
#+END_SRC
*** dom的遍历
**** NodeIterator
  + 可对dom树进行深度优先的搜索
  + 4个参数
   1. root
   2. whatToShow
   3. filter
   4. entityReferenceExpansion
 - 例子
#+BEGIN_SRC html
  <body>
     <div id="div1">
       <p>hellow <b>world!</b></p>
       <ul>
         <li>List item1</li>
         <li>List item2</li>
         <li>List item3</li>
       </ul>
     </div>
     <textarea rows="10" cols="40" id="text1"></textarea><br>
     <input type="button" value="排序" onClick="makeList()">
 </body>
#+END_SRC
#+BEGIN_SRC javaScript
 function makeList(){
	var oDiv = document.getElementById("div1");
	iterator = document.createNodeIterator(oDiv,
	NodeFilter.SHOW_ELEMENT,null,false);
	
	var oOutput = document.getElementById("text1");
	var oNode = iterator.nextNode();
	while(oNode){
		oOutput.value +=oNode.innerHTML +"\n";
		oNode = iterator.nextNode();
		}
	}
#+END_SRC
**** treeWalker
 - 常用遍历方法
  + parentNode()
  + firstChild()
  + lastChild()
  + nextSibling()
  + previousSibling()
 - 可用来进行目的性更强的遍历
 - 例子
#+BEGIN_SRC javaScript
  function makeList(){
	var oDiv = document.getElementById("div1");
	walker = document.createTreeWalker(oDiv,
	NodeFilter.SHOW_ELEMENT,null,false);
	walker.firstChild();
        walker.nextSibling();
	var oOutput = document.getElementById("text1");
	var oNode = walker.firstChild();
	while(oNode){
		oOutput.value +=oNode.innerHTML +"\n";
		oNode = walker.nextNode();
		}
	}
#+END_SRC

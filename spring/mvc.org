#+TITLE: springMVC
* 问题
** 映射请求到spring控制器
**  透明绑定表单参数
** 验证表单提交项
** 映射希望的内容到视图
* spring-mvc的原理
** 用户请求通过前端控制器 DispatcherServlet
** DispatcherServlet 查询处理器映射来决定将请求发给 mvc 的控制器
** 将用户提交的信息交给控制器
** 控制器处理业务逻辑，返回模型
** 控制器将模型打包到MOdelAndView中发回给 DispatcherServlet
** DispatcherServlet 根据视图解析器来决定返回到那个页面来渲染
* springMvc简介
** 配置 DispatcherServlet
*** servlet的配置
    #+BEGIN_SRC xml
     <servlet>
       	 <servlet-name>dispatcherServlet</servlet-name>
       	<servlet-class>org.springframework.web.servlet.
DispatcherServlet</servlet-class>
       	 <load-up>1</load-up>
    </servlet>
    #+END_SRC
*** 映射后缀
 #+BEGIN_SRC xml
   <servlet-mapping>
          	 <servlet-name>dispatcherServlet</servlet-name>
               <!-- 该Servlet会自动过滤所有以htm为后缀的请求 -->
               <url-pattern>*.htm</url-pattern>
  </servlet-mapping>
 #+END_SRC
*** 分解应用上下文
 - 按功能将配置文件分布式配置
 - 每个配置文件只负责该层的配置
 - 多个配置文件时需要上下文载入器 ContextLoaderListerner
 #+BEGIN_SRC xml
    <listerner>
      <listerner-class>org.springframework.web.context.
 ContextLoaderListerner</listerner-class>
    </listerner>
     <!-- 多个配置文件的载入  -->
   <context-param>
       <param-name>contextConfigLocation</param-name>
       <param-value>
       classpath: 配置文件1,classpath:配置文件2
      </param-value>
   </context-param>
 #+END_SRC
** 开发流程
 -  创建处理控制器
 - 在 DispatcherServlet 上下文配置文件
 - 配置视图解析器将控制器
 - 编写jsp
*** 创建控制器 
  - 被配置为spring上下文中一个普通的javaBean
*** 引入ModelAndView
  - 控制器必须返回
  - 可传递参数
*** 配置控制器Bean
  - 例子
  #+BEGIN_SRC xml
   <bean name="/映射的请求地址" class="控制器完整类名">
      <property name="控制器中需要的serviceBean对象"
 ref="已经声明好的serviceBean id"/>
   </bean>
  #+END_SRC
*** 声明视图解析器
 - 例子 - jsp
 #+BEGIN_SRC xml
   <bean id="viewResolver" class="org.springframework.web.servlet.
 view.InternalResourceViewResolver">
   <property name="prefix">
      <value>/WEB-INF/jsp/</value>
   </property>
   <property name="suffix">
    <value>.jsp</value> 
  </property>
  </bean>
 #+END_SRC
*** 创建jsp
** 将请求映射到控制器
 -  四种 HandlerMapping 实现
|-----------------------------------+--------------------|
| 映射名称                          | 映射途径           |
| BeanNameUrlHandelerMapping        | 根据控制器名称映射 |
| SimpleUrlHandlerMapping           | 上下文中定义的映射 |
| ControllerClassNameHandlerMapping | 控制器的类名称     |
| CommonsPathMapHandlerMapping      | 控制器代码中的元数据         |
*** SimpleUrlHandlerMapping
 - 例子
 #+BEGIN_SRC xml
   <bean id="simpleUrlMapping" class="org.springframework.web.servlet.handler.
SimpleUrlHandlerMapping">
       <property name="mapping">
          <prop key="/home.htm">homePageController</prop>
       </propety>
   </bean>
 #+END_SRC
*** ControllerClassNameHandlerMapping
 - 例子
 #+BEGIN_SRC xml
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.
ControllerClassNameHandlerMapping"/>
 #+END_SRC
*** CommonsPathMapHandlerMapping
 - 例子
 #+BEGIN_SRC xml
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.
CommonsPathMapHandlerMapping"/>
 #+END_SRC

*** 使用多映射处理器
  - 使用 order 属性配置优先权
 #+BEGIN_SRC xml
 <bean id="beanNameUrlMapping" class="org.springframework.web.servlet.handler.
BeanNameUrlHandlerMapping">
   <property name="order"><value>1</value></propery>
</bean>
<bean id="urlMapping" class="org.springframework.web.servlet.handler.
CommonsPathMapHandlerMapping">
   <property name="order"><value>2</value></propery>
</bean>
    #+END_SRC
  - order 越小,优先级越高
** 用控制器处理请求
*** 可选用的控制器
| 类型   | 类                                                     | 适用于                     |
|--------+--------------------------------------------------------+----------------------------|
| 视图   | ParameterizableViewController/UrlFilenameViewContrller | 控制器之需要显示静态的视图 |
| 简单   | Controller/AbstractController                          | 简单功能                   |
| 一次性 | ThrowawayController                                    | 命令请求方式               |
| 多动作 | MultiActionController                                  | 多动作处理                 |
| 命令   | BaseCommandController/AbastractCommandController       | 接受多个参数并验证         |
| 表单   | AbstractFormController/SimpleFormController            | 表单处理                   |
| 向导   | AbstractWizardFormController                           | 复杂的多页面输入表单,最后一个提交          |


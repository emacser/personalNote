** 软件需求
 - 定义
 包括创建和维护软件需文档所必需的一切活动的过程
- 分类
 需求开发和需求管理
** 软件需求概述
 - 定义
 用户对新系统在功能行为性能设计约束等方面的期望
*** 需求的层次
**** 业务需求
 企业或客户对系统高层次的目标要求
**** 用户需求
 用户的具体目标
**** 系统需求
 系统需求是从系统的角度来说明软件的需求
*** 质量功能部署(QFD)
**** 常规需求
**** 期望需求
**** 意外需求
** 需求获取
*** 用户访谈
**** 准备访谈
***** 确定访谈的目的
***** 确定访谈中包括哪些用户
***** 准备一些详细的问题
***** 作出最终的访谈安排
**** 访谈过程
***** 限制访谈时间
***** 寻找异常和错误情况
***** 深入调查细节
***** 认真做好记录
***** 访谈的后续工作
 吸收理解和记录访谈所获得的信息
 访谈内容备忘录给用户
***** 用户访谈的优缺点
 - 优点
  + 灵活性 宽广的应用范围
 - 缺点
  + 时间难以安排
  + 面谈信息量大，记录难以困难
  + 沟通技巧
  + 专业知识
*** 问卷调查
**** 调查表的制作
***** 确定问题及其类型
***** 编写问题
***** 设计问卷调查的格式
**** 优缺点
***** 双方未见面
***** 用户反馈的信息可能不全
***** 调查表不利于了解细节问题
***** 无法保证用户会回答问题或进一步说明所有问题
**** 提高问卷返还率的方法
***** 向客户解释问卷的目的和使用方法
***** 说明每个人都必须回答
***** 拜托相关领导配合
***** 尽量在全体会议上解释调查信息的相关问题
***** 尽量减少问卷花费时间
*****  奖励和奖品
*** 采样
 从种群中系统地选出有代表性的样本集
**** 样本大小
 样本大小 = α × （可信度系数/可接受错误）²
**** 采样的优缺点
 - 优点
  高效率 减少数据收集的偏差
 - 缺点
  对系统分析师的个人经验和能力依赖性很强
*** 情节串联板
**** 概念
 使用工具向用户说明系统如何适合企业的需要
**** 类型
 被动式 主动式 交互式
**** 制作
 静态工具和动态工具
**** 优缺点
直观但耗时
*** 联合需求计划（JRP）
 通过高度组织的群体会议来分析企业内的问题并获取需求的过程
**** 联合应用开发
***** 确定系统的范围和规范
***** 在预备会上向参与者介绍专题讨论的内容
***** 准备讨论材料
***** 进行讨论会
**** JRP会议
***** 与会者交流并针对所列举的问题进行逐项专题讨论
***** 对现有系统和类似系统的不足进行开放性交流
***** 对新的解决方案进行一番设想
***** 针对要点进行整理并评审
**** 主要原则
***** 实施之前应制订详细的议程
***** 按既定的时间安排
***** 尽量完整记录会议期间的内容
***** 避免专业术语
***** 运用解决冲突的技能
***** 充分的间歇时间
***** 鼓励团队取得一致的意见
***** 保证参与者能遒守事先约定的规则
*** 需求记录技术
**** 任务卡片
 适合业务活动的信息收集与整理
[[task_card.png]]
**** 场景说明
 用户对其工作场景和过程的详细描述
**** 用户故事
***** 独立性
***** 可协商性
***** 对用户有价值
***** 短小精悍
***** 可测试性
**** Volere白卡
 类似任务卡片的需求记录工具
[[volere-white.png]]
** 需求分析
 - 好需求的要求
  无二义性 完整性 一致性 可测试性 确定性 可跟踪性 正确性 必要性
*** 需求分析的任务
**** 绘制系统上下文范围关系图
**** 创建用户界面原型
**** 分析需求的可行性
**** 确定需求的优先级
**** 为需求建立模型
**** 创建数据字典
**** 使用QFD
*** 需求分析的方法
**** PDOA方法
***** 内容
****** 关注问题域
****** 关注解系统的待求行为
***** 过程
****** 收集基本的信息并开发问题框架,建立问题域的类型
****** 收集详细信息,给出一个问题域相关特性的描述
****** 收集并用文档说明新系统的需求
**** 方法的对比
***** SA方法关注于功能的分层和分解
***** OOA方法基于抽象,信息隐藏,功能独立和模块化
***** PODA方法重新将重点定位在问题域和需求上
** 结构化分析方法
[[xqfxtu.png]]
 - 核心是数据字典
 - 层次 数据 功能 行为
*** 数据流图DFD
**** 作用
***** 是理解和表达用户需求的工具
***** 描述了系统内部的逻辑过程
***** 存档的文字材科
**** 符号
 数据流 加工 数据存储 外部实体
**** 层次
***** 顶层图
[[dctu.png]]
***** 逐层分解
[[cctu.png]]
**** 制作
***** 系统的输入和输出
***** 系统的输入输出用一系列的处理连接起来
***** 为每一个数据流命名
***** 为加工命名
**** 原则
***** 所有图形符号只限于基本图形元素
***** 每个加工至少有一个输入数据流和输出数据流
***** 按层给加工编号
***** 子图和父图的平衡
***** 每个数据存储必须既有读的数据流,也有写的数据流
***** 可加入物质流
*** 状态转换图STD
 描述系统的状态和引起系统状态转换的事件
[[STD.png]]
*** 数据字典
**** 条目
 数据元素 数据结构 数据流 数据存储 加工逻辑 外部实体
**** 作用
***** 按各种要求列表
***** 相互参照
***** 由内容检索名称
***** 一致性检验和完整性检验
**** 管理
** 向对象分析方法
*** 统建模语言
**** UML的结构
***** 构造块
 事物 关系 图
***** 公有机制
 规格说明 修饰 公共分类 扩展机制
***** 规则
**** 5个系统视图
 逻辑视图 进程视图 实现视图 部署视图 用例视图
**** 事物
***** 结构事物
 类 接口 协作 用例 活动类 构件 节点
***** 行为事物
  交互 状态机
***** 分组事物
 包
***** 注释事物
**** 关系
***** 依赖
***** 关联
***** 泛化
***** 实现
**** 图
***** 类图
 描述一组类 接口 协作和它们之间的关系
***** 对象图
 描述一组对象及它们之间的关系
***** 构件图
 描述一个封装的类和它的接口 端口以及由内嵌的构件和连接件构成的内部结构
***** 组合结构图
 描述结构化的内部结构
***** 用例图
 描述一组用例 参与者及它们之间的关系
***** 顺序图
 强调消息的时间顺序的交互图
***** 通信图
 强调时序的交互图
***** 定时图
 强调消息跨越不同对象或参与者的时间
***** 状态图
 对象的动态视图
***** 活动图
 将进程或其他计算结构展示为计算内部一步步的控制流和数据流
***** 部署图
 对运行时的处理节点及在其中生存的构件配置
***** 制品图
 计算机中一个系统的物理结构
***** 包图
 模型本身分解而成的组织单元 以及它们之间的信赖关系
***** 交互概览图
 活动图和顺序图的混合物
*** 用例模型
 - SA方法的缺点
  + 容易混淆需求和设计的界限
  + 分割了各项系统功能的应用环境
**** 用例图的元素
***** 参与者
***** 用例
***** 通信关联
[[YLJBYS.png]]
**** 识别参与者
***** 其他系统
***** 硬件设备
***** 时钟
**** 合并需求获得用例
[[YL.png]]
***** 用例命名
***** 不能混淆用例和用例所包含的步骤
***** 注意区分业务用例和系统用例
**** 细化用例描述
***** 用例名称
***** 简要说明
***** 事件流
***** 非功能需求
***** 前置条件和后置条件
***** 扩展点
***** 优先级
**** 调整用例模型
***** 包含关系
[[BHGX.png]]
***** 扩展关系
[[KZGX.png]]
***** 泛化关系
[[FHGX.png]]
*** 分析模型
**** 定义概念类
***** 阅读和理解需求文档或用例描述
***** 筛选出名词或名词短语 建立初始类清单
***** 将候选类分成三类 显而易见的类 明显无意义类 不确定类别的类
***** 舍弃明显无意义的类
***** 小组讨论不确定类别的类 将它们都合并或调整到其他的两个类别
**** 确定类之间的关系
[[LZJGX.png]]
***** 关联关系
[[GLGX.png]]
***** 依赖关系
***** 泛化关系
***** 共享聚集
***** 组合聚集
***** 实现关系
**** 为类添加职责
 - 类所维护的知识 成员变量或属性
 - 类能执行的行为 成员方法或责任
**** 建立交互图
**** 分析模型的详细程度问题
** 需求定义
*** 需求定义的办法
**** 严格定义方法
***** 所有需求都能够被预先定义
***** 开发人员与用户之间能够准确而清晰地交流
***** 采用图形或文字可以充分体现最终系统
**** 原型方法
***** 并非所有的需求都能在系统开发前被准确地说明
***** 项目干系人之间通常都存在交流上的困难
***** 需要实际的可供用户参与的系统模型
***** 有合适的系统开发环境
***** 反复是完全需要和值得提倡的 需求确定后应该遵从严格方法
*** 软件需求规格说明书(SRS)
**** 编写方法
***** 用好的结构化和自然语言编写文本型档
***** 建立图形化模型
***** 编写形式化规格说明
**** 内容知格式
***** 范围
***** 引用文件
***** 需求
***** 合格性规定
***** 需求可追踪性
***** 尚未解决的问题
***** 注解
***** 附录
** 需求验证
*** 目的
**** 正确描述了预期的满足项目干系人需求的系统行为和特征
**** 软件需求是从系统需求 业务规格和其他来源中正确推导而来的
**** 需求是完整的和高质量的
**** 需求的表示在所有地方都是一致的
**** 需求为继续进行系统设计 实现和测试提供了足够的基础
*** 需求评审
**** 技术评审的类型
***** 评审
***** 检查
***** 走查
**** 正式评审的过程
***** 计划
***** 准备
***** 进行评审
***** 对评审结果采取行动
**** 如何做好需求评审
***** 分层次评审
***** 正式评审与非正式评审相结合
***** 分阶段评审
***** 精心挑选评审人员
***** 对评审人员进行培训
***** 充分利用需求评审检查单
***** 建立标准的评审流程
***** 作好评审后的跟踪工作
***** 充分准备评审
*** 需求测试
**** 概念测试用例
[[GLCSYL.png]]
**** 需求测试的过程
***** 需求测试人员根据测试用例所描述的若干可能的过程，进行概念上的执行，期望发现遗漏的错误的和不必要的需求
***** 根据测试结果修改对应的需求文档，完成一轮完整的需求测试过程
** 需求管理
*** 需求变更管理
**** 需求基线
 项目视图 范围文档 用例文档 SRS 分析模型
**** 需求的状态
**** 需求变更
[[XQZTBH.png]]
*** 需求风险管理
*** 需求跟踪

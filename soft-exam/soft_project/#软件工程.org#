* 软件工程
** 软件工程的组成
  方法 工具 过程
** 软件生命周期
*** 软件生命周期的定义
   从形成概念开始 经过开发 使用维护 直到最后退役的全部过程
***  软件生存周期过程
**** 基本过程
***** 获取过程
  为获取系统软件产品或软件服务的组织而定义的活动
***** 供应过程
  向需方提供系统软件产品或软件服务的组织而定义的活动
***** 开发过程 
  为定义并开发软件产品的组织而定义的活动
***** 运作过程
  在规定的环境中为其用户提供进行计算机系统服务的组织而定义的活动
***** 维护过程
  为提供软件产品服务的组织而定义的活动
**** 支持过程
***** 文档编制过程
  为记录生存周期过程所产生的信息而定义的活动
***** 配置管理过程 
  定义配置管理的活动
***** 质量保证过程 
  为客观地保证软件产品和过程符合规定的需求以及已建立的计划而定义的活动
***** 验证过程 
  根据软件项目需求按不同深度验证软件产品而定义的活动
***** 确认过程
  确认软件产品而定义的活动
***** 联合评审过程
  为判定符合于需求计划和合同而定义的活动
***** 问题解决过程 
  为分析和解决问题而定义的活动
***** 易用性过程
  易用性专业人员而定义的活动
**** 组织过程
***** 管理过程 
  为生存周期中管理而定义的基本活动
***** 基础过程 
  为建立生存周期过程基础而定义的基本活动
***** 改进过程
  为某一组织建立测量控制和改进其生存周期过程而定义需要执行的基本活动
***** 人力资源过程 
  为给组织或项目提供有技能和知识的员工而定义的活动
***** 资产管理过程 
  为组织的资产管理人员而定义的活动
***** 重用大纲管理过程
  为组织的复用大纲主管业定义的活动
***** 领域工程过程
  为领域模型领域架构的确定及领域资产的开发和维护而定义的活动
*** 软件生命周期各阶段的任务
****  可行性研究和项目开发计划
 - 通过分析用户提出的软件开发要求，确定软件项目的性质，目标和规模，得出可行性研究报告
****  需求分析
 - 把软件功能和性能的总体概念描述为具体的软件需求规格说明
**** 概要设计
 - 根据软件需求规格说明建立软件系统的总体结构和模块间的关系，定义各功能模块接口，设计全局数据库或数据结构，规定设计约束，制定组装测试计划
**** 详细设计
 - 将各模块要实现的功能用相应的设计工具详细描述出来
**** 实现
 - 写出正确易理解和易维护的程序模块
**** 组装测试
 - 将经过单元测试的模块逐步进行组装和测试
**** 确认测试
 - 护照规格说明书的规定，由用户对系统进行验收
**** 使用
 - 将软件安装在用户确定的运行环境中，测试通过后移交用户使用
****  维护
 - 通过各种必要的维护活动使系统持久地满足用户的需要
****  退役
 - 终止对软件产品的支持，软件停止使用
** 软件开发方法
*** 从开发风格上的分类
  - 自顶向下和自底向上
*** 从性质上的分类
  -  形式化和非形式化
*** 从适应范围的分类
  - 整体和局部方法
*** 形式化方法
**** 形式化方法概述
 - 利用形式化的规范语言，严格定义用户需求，采用数据推演的方法证明需求定义的性质
 - 包括严格的语法定义和语义定义，以及一系列数据推演规则
 - 优越性在于它能数学地表述和研究应用问题及其软件实现
**** 净室软件工程
 - 使用盒结构归约进行分析和建模，将正确性验证作为发现和排除错误的主要机制，使用统计测试来获取认证软件可靠性需要的信息
 - 强调有规约和设计上的严格性，以及使用基于数学的正确性证明来对设计模型的每个元素进行形式化验证
 - 理论基础是函数理论和抽样理论
***** 技术手段
****** 统计过程控制好奇地增量式开发
****** 基于函数的规范和设计
****** 正确性验证
****** 统计测试和软件认证
***** 缺点
****** 开发人员要求高
****** 正确性验证步骤比较困难
****** 开发小组不进行传统的模块测试是不现实的
*** 逆向工程
 分析程序，力图在比源代码更高抽象层次上建立程序的表示过程
**** 相关概念
***** 重构
 同一级别上转换系统描述形式
***** 设计恢复
 借助工具从已有程序中抽象出有关数据设计 总体结构设计和过程设计的信息
***** 再工程
**** 完备性
** 软件开发模型
*** 软件开发模型概述
**** 软件需求完全确定
***** 瀑布模型
****** 将软件开发的过程分为软件计划、需求分析、软件设计、程序编码、软件测试和运行维护6个阶段
****** 强调开发的阶段性、早期计划需求调查和产品测试，开发人员职责明晰，利于项目管理
****** 不能适应需求的变化对于项目风险的控制能力较弱
**** 软件开发初始阶段只能提供基本需求
***** 演化模型
****** 在快速开发一个原型的基础上，根据用户的反馈，对原型进行改进直到演化成最终产品
****** 功能一经开发就能进入测试
****** 用户的意见可能会对开发人员造成负面的影响
***** 螺旋模型
****** 瀑布和演入结合，加入了风险分析
****** 每次迭代都包括制定计划、风险分析、实施工程和客户评估4个方面
****** 适用于庞大、复杂和高风险的系统
****** 需要开发人员具有相当丰富的风险评估经验和专门知识
***** 喷泉模型
****** 以用户需求为动力，以对象为驱动的模型
****** 软件开发过程中自上而下的各阶段是相互重叠和多次反复的，各个阶段没有特定的顺序要求
****** 各个活动之间无明显边界
**** 以形式化开发为基础
***** 变换模型
****** 基于形式化规格说明语言和程序变换的软件开发模型，对形式化的软件规格说明进行了一系列半自动或自动的程序变换，最后映射为计算机能够接受的软件系统
****** 需要严格的数学理论和一整套开发环境的支持
***** 智能模型
****** 基于知识的软件开发模型
****** 基于规则的系统，采用规约和推理机制
****** 综合上述若干模型结合了专家系统
***** v模型
****** 在快速开发模型基础上演变而来
****** V模型中的过程从左至右，描述了基本的开发过程和测试行为
****** 其价值在于它非常明确地标明了测试过程中存在的不同级别和与开发过程各个阶段的对应关系
****** 需求分析 概要设计 详细设计 编码 单元测试 集成测试 系统测试 验收测试
****** 强调软件开发的协作和速度，将软件实现和验证有机地结合起来
****** 适合企业级软件开发
*** 快速应用开发(RAD)
 - 强调极短的开发周期
**** RAD的基本思想
***** 用户更主动地参与到系统分析 设计 构造活动中来
***** 将项目开发组织成一系列重点突出的研讨会，不同角色都参与
***** 通过迭代的构造方法，加速需求分析和设计阶段
***** 让用户提前看到一个可工作的系统
**** RAD的开发阶段
***** 业务建模
  - 确定驱动业务过程运作的信息，要生成的信息，如何生成、信息流的去向及其处理
 - 数据流图建立业务模型
***** 数据建模
 - 支持业务过程的数据流，查找数据对象集合、定义数据对象并与其他数据对象的关系构成数据模型
 - ER图建立数据模型
*****  处理建模
 - 将数据对象变换为要完成业务功能所需的信息流，创建处理以描述增加、修改删除或获得某个数据对象
 - 细化数据流图
***** 应用生成
 - 写出处理程序，复用已有构件或创建新的可复用构件
 - 生成并构建整个业务系统
***** 测试与交付
 - 总体测试和构件测试
**** RAD的特点
***** 局限性
 - 模块化比较高
 - 开发者和客户必须在很短的时间完成一系列的需求分析
 - 不适合技术风险高的情况
*** 统一过程(Unified Process)
 - 基于构件的一个通用的过程框架
**** 特点
 - 用例驱动
 - 以架构为中心
 - 迭代和增量
**** RUP概述
 - 将项目管理、业务建模、分析与设计等统一起来贯穿整个开发过程
 - 每一个阶段结束时进行评审
 - 一个迭代生成下一代产品
***** 软件过程
****** 初始阶段
******* 作用
 - 为项目建立业务模型并确定项目的边界
******* 实现过程
 - 明确项目规模
 - 评估项目风险
 - 制定项目计划
 - 阶段技术评审 
******* 细化阶段
 - 构建阶段
 - 移交阶段
****** 细化阶段
******* 作用
 分析问题领域，建立完善的架构，淘汰项目中最高风险的元素
******* 实现过程
 - 确定架构
 - 制订构建阶段计划
 - 建立支持环境
 - 选择构件
 - 阶段技术评审
****** 构建阶段
******* 作用
 开发所有剩余的构件和应用程序功能，把构件集成为产品，并进行详细测试
*** 敏捷方法
**** 特点
 - 强调开发团队与用户之间的紧密协作，面对面的沟通
 - 频繁交付新的软件版本，紧凑而自我组织型的团队
 - 更注重人的作用
**** 敏捷宣言
***** 内容
 - 个体和交互胜过过程和工具
 - 可工作的软件胜过大量的文档
 - 客户合作胜过合同谈判
 -  响应变化胜过遵循计划
***** 强调
 - 让客户满意和软件尽早增量发布
 - 小而高度自主的项目团队
 - 非正式的方法
 - 最小化软件工程工作产品以及整体精简开发
***** 原则
 客户参与 增量移交 简单性 接受变更 强调开发人员的作用和及时反馈
**** 特点
 - 客户参与往往依赖于客户参与的意愿和客户的代表性
 - 团队成员的性格可能不适合激烈的投入，可能无法做到与其他成员之间的良好沟通
 - 对系统的变更作出优先级排序可能是极端困难的
 - 维护系统的简洁性往往需要额外的工作，可能没有时间执行系统的简化过程
**** 适用场合
 - 项目团队人数不多，规模较小的项目
 - 项目经常发生变更
 - 高风险项目的实施
 - 组织结构的文化，人员，沟通性决定了敏捷方法是否适用
**** XP方法
 - 适用场景
  + 适用于中小型的开发团队,并且客户的需模糊多变
 - 特点
  + 在更短的周期内,更早地提供具体,持续的反馈信息
  + 迭代地进行计划编制,首先在在最开始迅速生成一个总体计划,然后在整个项目开发过程中不断地发展它
  + 依赖于自动测试程序来监控开发进度,并及早地捕获缺陷
  + 依赖于口头交流,测试和源程序进行沟通
  + 倡导持续的演化式的设计
  + 依赖于开发团队内部的紧密协作
  + 尽可能达到程序员短期利益和项目长期饶益的平衡
 - 组成
  + 价值观 原则 实践和行为
 - 核心
  + 沟通 简单 反馈 勇气
 - 原则
  + 快速反馈 简单性假设 逐步修改提倡更改和优质工作
 - 最佳实践
  + 计划游戏  小型分布 隐喻 简单设计 测试先行 重构 结对编程 集体代码所有制 持续集成 每周工作40小时 现场客户 编码标准
** 软件开发环境与工具
  支持软件工程化开发和维护而使用的一组软件
*** 软件开发环境
**** 软件开发环境的分类
 - 按软件开发模型和开发方法分类，有瀑布模型 演化模型 螺旋模型和喷泉模型等不同模型，以及结构化方法，面向对象方法等不同的软件开发环境
 - 按功能与结构特点分类，有单体型 协同型 分散型 并发型等多种类型的软件开发模型
 - 按应用范围分类，有通用性和专用性软件开发环境
 - 按开发阶段分类，有前端开发环境，后端开发环境，软件维护环境和逆向工程环境
**** 集成机制
 - 环境信息库
 - 过程控制与信息服务器
 - 环境用户界面
**** 集成计算机辅助软件工程（ICASE）
*** 软件开发工具
**** 软件工具分类
 - 软件开发工具
 - 软件维护工具
 - 软件管理和支持工具
**** 开发工具的选择
 - 要看它对设计模式和对象结构以及管理的支撑情况
 - 具体的使用环境，开发方法，软件架构和开发人员
**** 快速开发工具
 - 数据库编程语言 ，界面生成器和报告生成器等
 - 主要使用可视化技术
** 软件过程管理
*** 软件能力成熟度模型（CMM）
**** 等级
 - 初始级
 - 可重复级
 - 已定义级
 - 已管理级
 - 优化级
****  关键过程域
 [[kpa.png]]
**** 能力成熟度模型集成（CMMI）
 - 阶段式模型
[[CMMI1.png]]
**** 连续式模型
[[CMMI2.png]]
*** 软件过程评估
 根据过程模型或其它模型对组织的软件过程进行的规范评估
  - CMM模型
  - Trillum模型
  - Bootstrap方法
  - iSO/ICE 15504标准
  - SJ/T 11234-2001标准
 [[SJT.png]]

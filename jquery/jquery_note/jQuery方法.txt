1. 打开页面便加载代码的方法
1.1 <script language="javascript" src="jquery.min.js"></script>
	<script language="javascript">
window.onload=function()
{
	要处理的内容
}
</script>
1.2 用jQuery
<script language="javascript" src="jquery.min.js">
	$(document).ready(function(){
		....
	})
</script>
1.3 
$(function(){
	....
})
2. 不刷新修改页面内容的方法
var oElement= $("过滤元素");
oElement.innerHTML= 要修改的内容;

3. 在页面输出内容
document.write(要输出的内容);

4. 弹出警告框
alert("内容");

5. 实现动作更改显示效果
添加元素的动作属性
在脚本中获取该元素-->该元素.className +="追加的更改后显示效果css属性";

6. 监听函数的实现
添加元素的id或class
脚本:
	<script language="javascript">
window.onload = function()
{
	var oE = document.getElementById("元素的id名称");
	oE.onclick = function()
	{
		//动作激活后的处理;
	}
}
</script>

7. 添加与删除监听函数
元素.attachEvent("动作",监听函数);
元素.detachEvent("动作",监听函数);

8. 键盘的3个动作
onkeydown
onkeyup
onkeypress
从DOM中获取的文本输入对象.键盘动作 = 监听的函数

9. 屏蔽鼠标右键
	<script language="javascript">
function block(oEvent)
{
	if(window.event)
	{
		oEvent = window.event;
		oEvent.returnValue = false;
	}else
		oEvent.preventDefault();

}
document.onContextMenu = block;
</script>

10. 实现伸缩菜单
<style>
#navigation ul li ul.myHide{	/* 隐藏子菜单 */
	display:none;
}
#navigation ul li ul.myShow{	/* 显示子菜单 */
display:block;
}
-->
</style>
<script language="javascript">
function change(){
	//通过父元素li，找到兄弟元素ul
	var oSecondDiv = this.parentNode.getElementsByTagName("ul")[0];
	//CSS交替更换来实现显、隐
	if(oSecondDiv.className == "myHide")
		oSecondDiv.className = "myShow";
	else
		oSecondDiv.className = "myHide";
}
window.onload = function(){
	var oUl = document.getElementById("listUL");
	var aLi = oUl.childNodes;	//子元素
	var oA;
	for(var i=0;i<aLi.length;i++){
		//如果子元素为li，且这个li有子菜单ul
		if(aLi[i].tagName == "LI" && aLi[i].getElementsByTagName("ul").length){
			oA = aLi[i].firstChild;	//找到超链接
			oA.onclick = change;	//动态添加点击函数
		}
	}
}
</script>

</head>
<body>
<div id="navigation">
<ul id="listUL">
<li><a href="#">Home</a></li>
<li><a href="#">News</a>
<ul class="myHide">
<li><a href="#">Lastest News</a></li>
<li><a href="#">All News</a></li>
</ul>
</li>
<li><a href="#">Sports</a>
<ul class="myHide">
<li><a href="#">Basketball</a></li>
<li><a href="#">Football</a></li>
<li><a href="#">Volleyball</a></li>
</ul>        
</li>
<li><a href="#">Weather</a>
<ul class="myHide">
<li><a href="#">Today's Weather</a></li>
<li><a href="#">Forecast</a></li>
</ul>
</li>
<li><a href="#">Contact Me</a></li>
</ul>
</div>
</body>

11. 控制文本框字数
<textarea .... maxlength="自定义最大字数" onkeypress="return 自定义函数(this)"></textarea>
脚本
	<script language="javascript">
function 自定义函数(oTextarea)
{
	return oTextarea.value.length < oTextarea.getAttribute("maxlength");
}
</script>

12. 鼠标经过时自动选择
	<script language="javascript">
function myFocus()
{
	this.focus();
}
function mySelect()
{
	this.select();
}
window.onload = function()
{
	var vForm1 = document.forms["要选择的表单的名称"];
	vForm1.name.onmouseover = myFocus;
	vForm1.name.onfocus = mySelect;
}
</script>

	12. 判断页面是否被正常载入
if(xmlHttp.readyState==4&&xmlHttp.status==200)
{
	//处理代码
}

13. 解决js中的乱码
encodeURI(encodeURI(字符));
decodeURI(字符);

14. 实现事件监听
$("元素").bind("动作",function(){
		$("指定元素").append("监听事件");
		})

15. 移除事件监听
给监听函数赋值给变量
unbind("动作",监听函数)实现移除监听事件
<script language="javascript" src="jquery.min.js"></script>
<script language="javascript">
$(function(){
		var fnMyFunc1;	//函数变量
		$("img")
		.bind("click",fnMyFunc1 = function(){	//赋给函数变量
			$("#show").append("<div>点击事件1</div>");
			})
		.bind("click",function(){
			$("#show").append("<div>点击事件2</div>");
			})
		.bind("click",function(){
			$("#show").append("<div>点击事件3</div>");
			});
		$("input[type=button]").click(function(){
			$("img").unbind("click",fnMyFunc1);	//移除事件监听myFunc1
			});
		});
</script>

16.渐入渐出的效果
指定元素.hide(3000)
指定元素.hide(1000)
指定元素.fadeOut(3000)
指定元素.fadeIn(1000)

17. 拉窗帘的效果
指定元素.slideUp(1000)
指定元素.slideDown(1000)

18. 实现javascript变量的遍历
$.each(javascript变量,function(序号,要输出的值value))
$.each(javascript变量,function(属性名,属性值))

19. 过滤javascript变量
$.grep(javascript变量,function(value值){
	return //过滤条件
})

20. 将内容添加到指定元素中
$("指定元素的标示").text(要添加的对象.join())

21. 获取元素的所有值域
$("指定元素的标示").fieldValue();

22. 设置元素的透明度
$("指定元素的标示").css("opacity",0.6)

23. 动态创建元素
<script language="javascript" src="jquery.min.js"></script>
<script language="javascript">
$("<div>test</div>",{
  "class": "test",
  text: "Click me!",
  click: function(){
  $(this).toggleClass("test");
  }
").appendTo("body")
</script>

24. 遍历所有数组或对象
jQuery.each(obj,fn,arg)  
    该方法有三个参数:进行操作的对象obj，进行操作的函数fn，函数的参数args
24.1 obj对象是数组
each方法会对数组中子元素的逐个进行fn函数调用，直至调用某个子元素返回的结果为false为止，也就是说，我们可以在提供的fn函数进行处理，使之满足一定条件后就退出each方法调用。当each方法提供了arg参数时，fn函数调用传入的参数为arg，否则为：子元素索引，子元素本身
24.2 obj 对象不是数组
该方法同1的最大区别是：fn方法会被逐次不考虑返回值的进行进行。换句话说，obj对象的所有属性都会被fn方法进行调用，即使fn函数返回false。调用传入的参数同1类似。
jQuery.each=function( obj, fn, args ) {
    if ( args ) {
       if ( obj.length == undefined ){ 
           for ( var i in obj )
             fn.apply( obj, args ); 
       }else{
           for ( var i = 0, ol = obj.length; i < ol; i++ ) {
              if ( fn.apply( obj, args ) === false )
                  break; 

          }

       }
   } else {
       if ( obj.length == undefined ) {
            for ( var i in obj )
               fn.call( obj, i, obj );
       }else{
          for ( var i = 0, ol = obj.length, val = obj[0]; i < ol && fn.call(val,i,val) !== false; val = obj[++i] ){} 

       }
  }
  return obj;
}  
 需要特别注意的是each方法中fn的具体调用方法并不是采用简单的fn(i,val)或fn(args),而是采用了 fn.call(val,i,val)或fn.apply(obj.args)的形式，这意味着，在你自己的fn的实现中，可以直接采用this指针引用数组或是对象的子元素。这种方式是绝大多数jQuery所采用的一种实现方式

25. 实现tab菜单
25.1 菜单内容
<div id="菜单部分标记">
	<ul>
		<li><a href="#标记1"><span>菜单内容</span></a></li>
		<li><a href="#标记2"><span>菜单内容</span></a></li>
		<li><a href="#标记3"><span>菜单内容</span></a></li>
	</ul>
</div>
25.2 页面显示内容
<div id="标记1"></div>
<div id="标记2"></div>
<div id="标记3"></div>
25.3 javascript
$("#菜单部分标记>ul").tabs({
	fx:{opacity:"toggle",height:"toggle"};
	select:1;
})
